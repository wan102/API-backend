var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var AccessControl = require('../src').AccessControl;
function type(o) {
    return Object.prototype.toString.call(o).match(/\s(\w+)/i)[1].toLowerCase();
}
function throwsAccessControlError(fn, errMsg) {
    // expect(fn).toThrow();
    // try {
    //     fn();
    //     fail('should throw error');
    // } catch (err) {
    //     expect(err instanceof AccessControl.Error).toEqual(true);
    //     expect(AccessControl.isACError(err)).toEqual(true);
    //     if (errMsg) expect(err.message).toContain(errMsg);
    // }
    throwsError(fn, errMsg, AccessControl.Error.name);
}
function promiseThrowsError(promise, errMsg) {
    return __awaiter(this, void 0, void 0, function () {
        var err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, promise];
                case 1:
                    _a.sent();
                    fail('should throw error');
                    return [3 /*break*/, 3];
                case 2:
                    err_1 = _a.sent();
                    if (errMsg)
                        expect(err_1.message).toContain(errMsg);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function throwsError(fn, errMsg, errName) {
    expect(fn).toThrow();
    try {
        fn();
        fail('should throw error');
    }
    catch (err) {
        if (errName)
            expect(err.constructor.name).toEqual(errName);
        if (errMsg)
            expect(err.message).toContain(errMsg);
    }
}
describe('Test Suite: Access Control', function () {
    // grant list fetched from DB (to be converted to a valid grants object)
    var grantList = [
        { role: 'admin', resource: 'video', action: 'create', attributes: ['*'] },
        { role: 'admin', resource: 'video', action: 'read', attributes: ['*'] },
        { role: 'admin', resource: 'video', action: 'update', attributes: ['*'] },
        { role: 'admin', resource: 'video', action: 'delete', attributes: ['*'] },
        { role: 'user', resource: 'video', action: 'create', attributes: ['*'] },
        { role: 'user', resource: 'video', action: 'read', attributes: ['*'] },
        { role: 'user', resource: 'video', action: 'update', attributes: ['*'] },
        { role: 'user', resource: 'video', action: 'delete', attributes: ['*'] }
    ];
    var grantListWithExtendRoles = grantList.concat([
        { role: 'editor', resource: 'post', action: 'create', attributes: ['*'] },
        { role: 'editor', extend: ['user'] },
        { role: 'editor', resource: 'post', action: 'delete', attributes: ['*'] }
    ]);
    // valid grants object
    var grantsObject = {
        admin: {
            grants: [
                {
                    resource: 'video', action: 'create'
                },
                {
                    resource: 'video', action: 'read'
                },
                {
                    resource: 'video', action: 'update'
                },
                {
                    resource: 'video', action: 'delete'
                }
            ]
        },
        user: {
            grants: [
                {
                    resource: 'video', action: 'create', attributes: ['*']
                },
                {
                    resource: 'video', action: 'read', attributes: ['*']
                },
                {
                    resource: 'video', action: 'update', attributes: ['*']
                },
                {
                    resource: 'video', action: 'delete', attributes: ['*']
                }
            ]
        }
    };
    var categorySportsCondition = { 'Fn': 'EQUALS', 'args': { 'category': 'sports' } };
    var categoryPoliticsCondition = { 'Fn': 'EQUALS', 'args': { 'category': 'politics' } };
    var categoryHealthCondition = { 'Fn': 'EQUALS', 'args': { 'category': 'health' } };
    var categoryBusinessCondition = { 'Fn': 'EQUALS', 'args': { 'category': 'business' } };
    var categorySportsContext = { category: 'sports' };
    var categoryPoliticsContext = { category: 'politics' };
    var categoryHealthContext = { category: 'health' };
    var categoryBusinessContext = { category: 'business' };
    var customContextAllowed = { loginUserId: '1', resourceProfileId: '1' };
    var customContextNotAllowed = { loginUserId: '1', resourceProfileId: '2' };
    var conditionalGrantList = [
        {
            role: 'sports/editor', resource: 'article', action: 'create', attributes: ['*'],
            condition: categorySportsCondition
        },
        {
            role: 'sports/editor', resource: 'article', action: 'update', attributes: ['*'],
            condition: categorySportsCondition
        },
        {
            role: 'sports/writer', resource: 'article', action: 'create', attributes: ['*', '!status'],
            condition: categorySportsCondition
        },
        {
            role: 'sports/writer', resource: 'article', action: 'update', attributes: ['*', '!status'],
            condition: categorySportsCondition
        }
    ];
    var conditionalGrantObject = {
        'sports/editor': {
            grants: [
                {
                    resource: 'article', action: 'create', attributes: ['*'],
                    condition: categorySportsCondition
                },
                {
                    resource: 'article', action: 'update', attributes: ['*'],
                    condition: categorySportsCondition
                }
            ]
        },
        'sports/writer': {
            grants: [{
                    resource: 'article', action: 'create', attributes: ['*', '!status'],
                    condition: categorySportsCondition
                },
                {
                    resource: 'article', action: 'update', attributes: ['*', '!status'],
                    condition: categorySportsCondition
                }]
        }
    };
    var conditionalGrantObjectWithCustomAsyncFunction = {
        'sports/custom': {
            grants: [
                {
                    resource: 'profile', action: ['create', 'edit'], attributes: ['*'],
                    condition: function (context) {
                        return new Promise(function (resolve) {
                            setTimeout(function () {
                                resolve(context.loginUserId === context.resourceProfileId);
                            }, 200);
                        });
                    }
                }
            ]
        }
    };
    var conditionalGrantObjectWithCustomSyncFunction = {
        'sports/custom': {
            grants: [
                {
                    resource: 'profile', action: ['create', 'edit'], attributes: ['*'],
                    condition: function (context) {
                        return context.loginUserId === context.resourceProfileId;
                    }
                }
            ]
        }
    };
    var conditionalGrantArrayWithCustomAsyncFunction = [
        {
            role: 'sports/custom',
            resource: 'profile', action: ['create', 'edit'], attributes: ['*'],
            condition: function (context) {
                return new Promise(function (resolve) {
                    setTimeout(function () {
                        resolve(context.loginUserId === context.resourceProfileId);
                    }, 200);
                });
            }
        }
    ];
    var conditionalGrantArrayWithCustomSyncFunction = [
        {
            role: 'sports/custom',
            resource: 'profile', action: ['create', 'edit'], attributes: ['*'],
            condition: function (context) {
                return context.loginUserId === context.resourceProfileId;
            }
        }
    ];
    beforeEach(function () {
        this.ac = new AccessControl();
    });
    // ----------------------------
    //  TESTS
    // ----------------------------
    it('should add grants from flat list (db), check/remove roles and resources', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac;
            return __generator(this, function (_a) {
                ac = this.ac;
                ac.setGrants(grantList);
                // console.log("grants", ac.getGrants());
                // console.log("resources", ac.getResources());
                // console.log("roles", ac.getRoles());
                expect(ac.getRoles().length).toEqual(2);
                expect(ac.hasRole('admin')).toEqual(true);
                expect(ac.hasRole('user')).toEqual(true);
                expect(ac.hasRole('moderator')).toEqual(false);
                // removeRoles should also accept a string
                ac.removeRoles('admin');
                expect(ac.hasRole('admin')).toEqual(false);
                // no role named moderator but this should work
                ac.removeRoles(['user', 'moderator']);
                expect(ac.getRoles().length).toEqual(0);
                return [2 /*return*/];
            });
        });
    });
    it('should add grants from flat list (db) with extendRoles', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac;
            return __generator(this, function (_a) {
                ac = this.ac;
                ac.setGrants(grantListWithExtendRoles);
                expect((ac.can('user').execute('create').sync().on('video')).granted).toBeTruthy();
                expect((ac.can('editor').execute('create').sync().on('post')).granted).toBeTruthy();
                expect((ac.can('editor').execute('create').sync().on('video')).granted).toBeTruthy();
                expect((ac.can('editor').execute('delete').sync().on('post')).granted).toBeTruthy();
                return [2 /*return*/];
            });
        });
    });
    it('should add conditional grants from flat list (db), check/remove roles and resources', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac;
            return __generator(this, function (_a) {
                ac = this.ac;
                ac.setGrants(conditionalGrantList);
                // console.log("grants", ac.getGrants());
                // console.log("resources", ac.getResources());
                // console.log("roles", ac.getRoles());
                expect(ac.getRoles().length).toEqual(2);
                expect(ac.hasRole('sports/editor')).toEqual(true);
                expect(ac.hasRole('sports/writer')).toEqual(true);
                expect(ac.hasRole('sports/moderator')).toEqual(false);
                ac.removeRoles('sports/editor');
                expect(ac.hasRole('sports/editor')).toEqual(false);
                // no role named moderator but this should work
                ac.removeRoles(['sports/writer', 'moderator']);
                expect(ac.getRoles().length).toEqual(0);
                return [2 /*return*/];
            });
        });
    });
    it('should grant access and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, attrs, conditionalAttrs, _a, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        ac = this.ac;
                        attrs = ['*', '!size'];
                        conditionalAttrs = [{
                                attributes: attrs,
                                condition: undefined
                            }];
                        ac.grant('user').execute('create').on('photo', attrs);
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').execute('create').on('photo')];
                    case 1:
                        _a.apply(void 0, [(_f.sent()).attributes]).toEqual(attrs);
                        // grant multiple roles the same permission for the same resource
                        ac.grant(['user', 'admin']).execute('read').on('photo', attrs);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').execute('read').on('photo')];
                    case 2:
                        _b.apply(void 0, [(_f.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('admin').execute('read').on('photo')];
                    case 3:
                        _c.apply(void 0, [(_f.sent()).granted]).toEqual(true);
                        ac.grant('user').execute('update').on('photo', attrs);
                        _d = expect;
                        return [4 /*yield*/, ac.can('user').execute('update').on('photo')];
                    case 4:
                        _d.apply(void 0, [(_f.sent()).attributes]).toEqual(attrs);
                        ac.grant('user').execute('delete').on('photo', attrs);
                        _e = expect;
                        return [4 /*yield*/, ac.can('user').execute('delete').on('photo')];
                    case 5:
                        _e.apply(void 0, [(_f.sent()).attributes]).toEqual(attrs);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access and check permissions synchronously', function () {
        var ac = this.ac;
        var attrs = ['*', '!size'];
        ac.grant('user').execute('create').on('photo', attrs);
        expect((ac.can('user').execute('create').sync().on('photo')).attributes).toEqual(attrs);
        // grant multiple roles the same permission for the same resource
        ac.grant(['user', 'admin']).execute('read').on('photo', attrs);
        expect((ac.can('user').execute('read').sync().on('photo')).granted).toEqual(true);
        expect((ac.can('admin').execute('read').sync().on('photo')).granted).toEqual(true);
        ac.grant('user').execute('update').on('photo', attrs);
        expect((ac.can('user').execute('update').sync().on('photo')).attributes).toEqual(attrs);
        ac.grant('user').execute('delete').on('photo', attrs);
        expect((ac.can('user').execute('delete').sync().on('photo')).attributes).toEqual(attrs);
    });
    it('should grant access and check permissions for wildcard resources', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, attrs, _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        ac = this.ac;
                        attrs = ['*', '!size'];
                        ac.grant('user1').execute('create').on('!photo', attrs);
                        _a = expect;
                        return [4 /*yield*/, ac.can('user1').execute('create').on('photo')];
                    case 1:
                        _a.apply(void 0, [(_g.sent()).granted]).toEqual(false);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user1').execute('create').on('video')];
                    case 2:
                        _b.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        ac.grant('user2').execute('create').on(['photo', 'video'], attrs);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user2').execute('create').on('photo')];
                    case 3:
                        _c.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        _d = expect;
                        return [4 /*yield*/, ac.can('user2').execute('create').on('video')];
                    case 4:
                        _d.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        ac.grant('user3').execute('create').on(['!photo'], attrs);
                        _e = expect;
                        return [4 /*yield*/, ac.can('user3').execute('create').on('photo')];
                    case 5:
                        _e.apply(void 0, [(_g.sent()).granted]).toEqual(false);
                        _f = expect;
                        return [4 /*yield*/, ac.can('user3').execute('create').on('video')];
                    case 6:
                        _f.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access and check permissions for wildcard resources synchronously', function () {
        var ac = this.ac;
        var attrs = ['*', '!size'];
        var conditionalAttrs = [{
                attributes: attrs,
                condition: undefined
            }];
        ac.grant('user1').execute('create').on('!photo', attrs);
        expect((ac.can('user1').execute('create').sync().on('photo')).granted).toEqual(false);
        expect((ac.can('user1').execute('create').sync().on('video')).granted).toEqual(true);
        ac.grant('user2').execute('create').on(['photo', 'video'], attrs);
        expect((ac.can('user2').execute('create').sync().on('photo')).granted).toEqual(true);
        expect((ac.can('user2').execute('create').sync().on('video')).granted).toEqual(true);
        ac.grant('user3').execute('create').on(['!photo'], attrs);
        expect((ac.can('user3').execute('create').sync().on('photo')).granted).toEqual(false);
        expect((ac.can('user3').execute('create').sync().on('video')).granted).toEqual(true);
    });
    it('should grant access and check permissions for wildcard actions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, attrs, conditionalAttrs, _a, _b, _c, _d, _e, _f, _g, _h, _j;
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        ac = this.ac;
                        attrs = ['*', '!size'];
                        conditionalAttrs = [{
                                attributes: attrs,
                                condition: undefined
                            }];
                        ac.grant('user1').execute('!create').on('photo', attrs);
                        _a = expect;
                        return [4 /*yield*/, ac.can('user1').execute('create').on('photo')];
                    case 1:
                        _a.apply(void 0, [(_k.sent()).granted]).toEqual(false);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user1').execute('update').on('photo')];
                    case 2:
                        _b.apply(void 0, [(_k.sent()).granted]).toEqual(true);
                        ac.grant('user1').execute(['*', '!create']).on('photo', attrs);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user1').execute('create').on('photo')];
                    case 3:
                        _c.apply(void 0, [(_k.sent()).granted]).toEqual(false);
                        _d = expect;
                        return [4 /*yield*/, ac.can('user1').execute('update').on('photo')];
                    case 4:
                        _d.apply(void 0, [(_k.sent()).granted]).toEqual(true);
                        _e = expect;
                        return [4 /*yield*/, ac.can('user1').execute('update').on('photo')];
                    case 5:
                        _e.apply(void 0, [(_k.sent()).granted]).toEqual(true);
                        ac.grant('user2').execute(['create', 'update']).on(['photo'], attrs);
                        _f = expect;
                        return [4 /*yield*/, ac.can('user2').execute('update').on('photo')];
                    case 6:
                        _f.apply(void 0, [(_k.sent()).granted]).toEqual(true);
                        _g = expect;
                        return [4 /*yield*/, ac.can('user2').execute('create').on('photo')];
                    case 7:
                        _g.apply(void 0, [(_k.sent()).granted]).toEqual(true);
                        ac.grant('user3').execute(['*', '!create']).on(['photo'], attrs);
                        _h = expect;
                        return [4 /*yield*/, ac.can('user3').execute('update').on('photo')];
                    case 8:
                        _h.apply(void 0, [(_k.sent()).granted]).toEqual(true);
                        _j = expect;
                        return [4 /*yield*/, ac.can('user3').execute('create').on('photo')];
                    case 9:
                        _j.apply(void 0, [(_k.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access and check permissions for wildcard actions synchronously', function () {
        var ac = this.ac;
        var attrs = ['*', '!size'];
        ac.grant('user1').execute('!create').on('photo', attrs);
        expect((ac.can('user1').execute('create').sync().on('photo')).granted).toEqual(false);
        expect((ac.can('user1').execute('update').sync().on('photo')).granted).toEqual(true);
        ac.grant('user1').execute(['*', '!create']).on('photo', attrs);
        expect((ac.can('user1').execute('create').sync().on('photo')).granted).toEqual(false);
        expect((ac.can('user1').execute('update').sync().on('photo')).granted).toEqual(true);
        expect((ac.can('user1').execute('update').sync().on('photo')).granted).toEqual(true);
        ac.grant('user2').execute(['create', 'update']).on(['photo'], attrs);
        expect((ac.can('user2').execute('update').sync().on('photo')).granted).toEqual(true);
        expect((ac.can('user2').execute('create').sync().on('photo')).granted).toEqual(true);
        ac.grant('user3').execute(['*', '!create']).on(['photo'], attrs);
        expect((ac.can('user3').execute('update').sync().on('photo')).granted).toEqual(true);
        expect((ac.can('user3').execute('create').sync().on('photo')).granted).toEqual(false);
    });
    it('should filter object properties', function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(AccessControl.filter({ status: 'approved', id: 123 }, ['*', '!status'])).toEqual({ id: 123 });
                expect(AccessControl.filter({ status: 'approved', id: 123 }, ['*'])).toEqual({ status: 'approved', id: 123 });
                return [2 /*return*/];
            });
        });
    });
    it('should grant access with custom actions and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, attrs, conditionalAttrs, permission, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ac = this.ac;
                        attrs = ['*', '!status'];
                        conditionalAttrs = [{
                                attributes: attrs,
                                condition: undefined
                            }];
                        ac.grant('editor').execute('publish').on('article', attrs);
                        return [4 /*yield*/, ac.can('editor').execute('publish').on('article')];
                    case 1:
                        permission = _b.sent();
                        expect(permission.attributes).toEqual(attrs);
                        _a = expect;
                        return [4 /*yield*/, (permission.granted)];
                    case 2:
                        _a.apply(void 0, [_b.sent()]).toEqual(true);
                        ac.grant('sports/editor').execute('publish').when(categorySportsCondition).on('article', attrs);
                        return [4 /*yield*/, ac.can('sports/editor').execute('publish').with(categorySportsContext).on('article')];
                    case 3:
                        permission = _b.sent();
                        expect(permission.attributes).toEqual(attrs);
                        expect(permission.granted).toEqual(true);
                        return [4 /*yield*/, ac.can('sports/editor').execute('publish').with(categoryPoliticsContext).on('article')];
                    case 4:
                        permission = _b.sent();
                        expect(permission.attributes).toEqual([]);
                        expect(permission.granted).toEqual(false);
                        ac.grant({
                            role: 'politics/editor',
                            action: 'publish',
                            resource: 'article',
                            condition: categoryPoliticsCondition,
                            attributes: attrs
                        });
                        return [4 /*yield*/, ac.can('politics/editor').execute('publish').with(categoryPoliticsContext).on('article')];
                    case 5:
                        permission = _b.sent();
                        expect(permission.attributes).toEqual(attrs);
                        expect(permission.granted).toEqual(true);
                        // Simply set all the fields and call commit at the end
                        ac.grant('user')
                            .action('post')
                            .resource('blog')
                            .attributes(attrs)
                            .condition({ Fn: 'EQUALS', args: { logged: true } })
                            .commit();
                        return [4 /*yield*/, ac.can('user').execute('post').with({ logged: true }).on('blog')];
                    case 6:
                        permission = _b.sent();
                        expect(permission.attributes).toEqual(attrs);
                        expect(permission.granted).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with custom actions and check permissions synchronously', function () {
        var ac = this.ac;
        var attrs = ['*', '!status'];
        var conditionalAttrs = [{
                attributes: attrs,
                condition: undefined
            }];
        ac.grant('editor').execute('publish').on('article', attrs);
        var permission = ac.can('editor').execute('publish').sync().on('article');
        expect(permission.attributes).toEqual(attrs);
        expect((permission.granted)).toEqual(true);
        ac.grant('sports/editor').execute('publish').when(categorySportsCondition).on('article', attrs);
        permission = ac.can('sports/editor').execute('publish').sync().with(categorySportsContext).on('article');
        expect(permission.attributes).toEqual(attrs);
        expect(permission.granted).toEqual(true);
        permission = ac.can('sports/editor').execute('publish').sync().with(categoryPoliticsContext).on('article');
        expect(permission.attributes).toEqual([]);
        expect(permission.granted).toEqual(false);
        ac.grant({
            role: 'politics/editor',
            action: 'publish',
            resource: 'article',
            condition: categoryPoliticsCondition,
            attributes: attrs
        });
        permission = ac.can('politics/editor').execute('publish').sync().with(categoryPoliticsContext).on('article');
        expect(permission.attributes).toEqual(attrs);
        expect(permission.granted).toEqual(true);
        // Simply set all the fields and call commit at the end
        ac.grant('user')
            .action('post')
            .resource('blog')
            .attributes(attrs)
            .condition({ Fn: 'EQUALS', args: { logged: true } })
            .commit();
        permission = ac.can('user').execute('post').sync().with({ logged: true }).on('blog');
        expect(permission.attributes).toEqual(attrs);
        expect(permission.granted).toEqual(true);
    });
    it('should grant access with OR condition and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'OR',
                            args: [
                                categorySportsCondition,
                                categoryPoliticsCondition
                            ]
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context(categoryPoliticsContext).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context({ category: 'tech' }).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with OR condition and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'OR',
            args: [
                categorySportsCondition,
                categoryPoliticsCondition
            ]
        }).execute('create').on('article');
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context(categoryPoliticsContext).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context({ category: 'tech' }).execute('create').sync().on('article')).granted).toEqual(false);
    });
    it('should grant access with equals conditions with null values', function () {
        var ac = new AccessControl([{
                role: 'user',
                resource: 'task',
                action: ['update'],
                attributes: ['*'],
                condition: {
                    Fn: 'AND',
                    args: [
                        { 'Fn': 'EQUALS', 'args': { 'userId': '$.AssignedId' } },
                        { 'Fn': 'EQUALS', 'args': { 'CompletedAt': null } }
                    ]
                }
            }]);
        expect((ac.can('user').context({
            AssignedId: 'abc123',
            CompletedAt: null,
            userId: 'abc123'
        }).execute('update').sync().on('task')).granted).toEqual(true);
    });
    it('should grant access with equals condition with list of values and check permissions ', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'EQUALS',
                            args: {
                                'category': ['sports', 'politics']
                            }
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context(categoryPoliticsContext).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context({ tag: 'tech' }).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with equals condition with list of values and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'EQUALS',
            args: {
                'category': ['sports', 'politics']
            }
        }).execute('create').on('article');
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context(categoryPoliticsContext).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context({ tag: 'tech' }).execute('create').sync().on('article')).granted).toEqual(false);
    });
    it('should grant access with equals condition with single and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'EQUALS',
                            args: {
                                'category': 'sports'
                            }
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context({ category: 'tech' }).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with equals condition with single and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'EQUALS',
            args: {
                'category': 'sports'
            }
        }).execute('create').on('article');
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context({ category: 'tech' }).execute('create').sync().on('article')).granted).toEqual(false);
    });
    it('should grant access with not equals condition with list of values and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'NOT_EQUALS',
                            args: {
                                'category': ['sports', 'politics']
                            }
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context(categoryPoliticsContext).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context({ category: 'tech' }).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with not equals condition with list of values and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'NOT_EQUALS',
            args: {
                'category': ['sports', 'politics']
            }
        }).execute('create').on('article');
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(false);
        expect((ac.can('user').context(categoryPoliticsContext).execute('create').sync().on('article')).granted).toEqual(false);
        expect((ac.can('user').context({ category: 'tech' }).execute('create').sync().on('article')).granted).toEqual(true);
    });
    it('should grant access with not equals condition with single value and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'NOT_EQUALS',
                            args: {
                                'category': 'sports'
                            }
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context({ category: 'tech' }).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with not equals condition with single value and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'NOT_EQUALS',
            args: {
                'category': 'sports'
            }
        }).execute('create').on('article');
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(false);
        expect((ac.can('user').context({ category: 'tech' }).execute('create').sync().on('article')).granted).toEqual(true);
    });
    it('should grant access with and condition with list value and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'AND',
                            args: [
                                {
                                    Fn: 'NOT_EQUALS',
                                    args: {
                                        'category': 'sports'
                                    }
                                },
                                {
                                    Fn: 'NOT_EQUALS',
                                    args: {
                                        'category': 'politics'
                                    }
                                }
                            ]
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context(categoryPoliticsContext).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context({ category: 'tech' }).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with and condition with list value and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'AND',
            args: [
                {
                    Fn: 'NOT_EQUALS',
                    args: {
                        'category': 'sports'
                    }
                },
                {
                    Fn: 'NOT_EQUALS',
                    args: {
                        'category': 'politics'
                    }
                }
            ]
        }).execute('create').on('article');
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(false);
        expect((ac.can('user').context(categoryPoliticsContext).execute('create').sync().on('article')).granted).toEqual(false);
        expect((ac.can('user').context({ category: 'tech' }).execute('create').sync().on('article')).granted).toEqual(true);
    });
    it('should grant access with JSONPath context keys or values with EQUALS condition', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'EQUALS',
                            args: {
                                'requester': '$.owner'
                            }
                        }).execute('edit').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context({ owner: 'dilip', requester: 'dilip' })
                                .execute('edit').on('article')];
                    case 1:
                        _a.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context({ owner: 'tensult', requester: 'dilip' })
                                .execute('edit').on('article')];
                    case 2:
                        _b.apply(void 0, [(_e.sent()).granted]).toEqual(false);
                        ac.grant('user').condition({
                            Fn: 'EQUALS',
                            args: {
                                '$.request.initiator': '$.owner'
                            }
                        }).execute('edit').on('article');
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context({ owner: 'dilip', request: { initiator: 'dilip' } })
                                .execute('edit').on('article')];
                    case 3:
                        _c.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        _d = expect;
                        return [4 /*yield*/, ac.can('user').context({ owner: 'tensult', request: { initiator: 'dilip' } })
                                .execute('edit').on('article')];
                    case 4:
                        _d.apply(void 0, [(_e.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with JSONPath context values with EQUALS condition synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'EQUALS',
            args: {
                'requester': '$.owner'
            }
        }).execute('edit').on('article');
        expect((ac.can('user').context({ owner: 'dilip', requester: 'dilip' })
            .execute('edit').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context({ owner: 'tensult', requester: 'dilip' })
            .execute('edit').sync().on('article')).granted).toEqual(false);
    });
    it('should grant access with JSONPath context values with NOT_EQUALS condition', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'NOT_EQUALS',
                            args: {
                                '$.requester': '$.owner'
                            }
                        }).execute('approve').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context({ owner: 'dilip', requester: 'dilip' })
                                .execute('approve').on('article')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context({ owner: 'tensult', requester: 'dilip' })
                                .execute('approve').on('article')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with JSONPath context values with NOT_EQUALS condition synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'NOT_EQUALS',
            args: {
                '$.requester': '$.owner'
            }
        }).execute('approve').on('article');
        expect((ac.can('user').context({ owner: 'dilip', requester: 'dilip' })
            .execute('approve').sync().on('article')).granted).toEqual(false);
        expect((ac.can('user').context({ owner: 'tensult', requester: 'dilip' })
            .execute('approve').sync().on('article')).granted).toEqual(true);
    });
    it('should grant access with and with custom condition function', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition(function (context) {
                            return context.category !== 'politics';
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context(categoryPoliticsContext).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context({ category: 'tech' }).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with and with custom condition function synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition(function (context) {
            return context.category !== 'politics';
        }).execute('create').on('article');
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context(categoryPoliticsContext).execute('create').sync().on('article')).granted).toEqual(false);
        expect((ac.can('user').context({ category: 'tech' }).execute('create').sync().on('article')).granted).toEqual(true);
    });
    it('should grant access with and with async custom condition function', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition(function (context) {
                            return new Promise(function (resolve) {
                                setTimeout(function () {
                                    resolve(context.category !== 'politics');
                                }, 200);
                            });
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context(categoryPoliticsContext).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context({ category: 'tech' }).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should fail when async custom condition used in sync', function () {
        var ac = this.ac;
        ac.grant('user').condition(function (context) {
            return new Promise(function (resolve) {
                setTimeout(function () {
                    resolve(context.category !== 'politics');
                }, 200);
            });
        }).execute('create').on('article');
        throwsAccessControlError(function () { ac.can('user').context(categorySportsContext).execute('create').sync().on('article'); });
        throwsAccessControlError(function () { ac.can('user').context(categoryPoliticsContext).execute('create').sync().on('article'); });
        throwsAccessControlError(function () { ac.can('user').context({ category: 'tech' }).execute('create').sync().on('article'); });
    });
    it('should support initializing ACL with custom named functions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var conditionalGrantObjectWithCustomNamedFunction, acUsingObj, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        conditionalGrantObjectWithCustomNamedFunction = {
                            grants: [
                                {
                                    role: 'user', resource: 'profile', action: ['create', 'edit'], attributes: ['*'],
                                    condition: "custom:isOwner"
                                }
                            ],
                            customConditionFunctions: {
                                isOwner: function (context) {
                                    return new Promise(function (resolve) {
                                        setTimeout(function () {
                                            resolve(context.loginUserId === context.resourceProfileId);
                                        }, 200);
                                    });
                                }
                            }
                        };
                        acUsingObj = new AccessControl(conditionalGrantObjectWithCustomNamedFunction.grants, conditionalGrantObjectWithCustomNamedFunction.customConditionFunctions);
                        _a = expect;
                        return [4 /*yield*/, acUsingObj.can('user').context(customContextAllowed)
                                .execute('create').on('profile')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, acUsingObj.can('user').context(customContextNotAllowed)
                                .execute('edit').on('profile')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should support registering custom named functions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var customConditionFunctions, ac, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        customConditionFunctions = {
                            isOwner: function (context) {
                                return new Promise(function (resolve) {
                                    setTimeout(function () {
                                        resolve(context.loginUserId === context.resourceProfileId);
                                    }, 200);
                                });
                            }
                        };
                        ac = new AccessControl();
                        ac.registerConditionFunction('isOwner', customConditionFunctions.isOwner);
                        ac.grant("user").condition('custom:isOwner').execute(['create', 'edit']).on('profile');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(customContextAllowed)
                                .execute('create').on('profile')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context(customContextNotAllowed)
                                .execute('edit').on('profile')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should support registering custom named functions as condition object', function () {
        return __awaiter(this, void 0, void 0, function () {
            var customConditionFunctions, ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        customConditionFunctions = {
                            gte: function (context, args) {
                                return new Promise(function (resolve) {
                                    setTimeout(function () {
                                        resolve(context.level >= args.level);
                                    }, 200);
                                });
                            }
                        };
                        ac = new AccessControl();
                        ac.registerConditionFunction('gte', customConditionFunctions.gte);
                        ac.grant("user").condition({ Fn: 'custom:gte', args: { level: 2 } }).execute(['comment']).on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context({ level: 2 })
                                .execute('comment').on('article')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context({ level: 3 })
                                .execute('comment').on('article')];
                    case 2:
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context({ level: 1 })
                                .execute('comment').on('article')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should validate custom named functions as condition object', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac;
            return __generator(this, function (_a) {
                ac = new AccessControl();
                expect(function () {
                    return ac.grant("user").condition({ Fn: 'custom:gte', args: { level: 2 } })
                        .execute(['comment']).on('article');
                }).toThrow();
                return [2 /*return*/];
            });
        });
    });
    it('should validate custom named functions as condition string', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac;
            return __generator(this, function (_a) {
                ac = new AccessControl();
                expect(function () {
                    return ac.grant("user").condition('custom:gte')
                        .execute(['comment']).on('article');
                }).toThrow();
                return [2 /*return*/];
            });
        });
    });
    it('should support initializing ACL when grants has custom functions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var acUsingObj, _a, _b, acUsingArray, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        acUsingObj = new AccessControl(conditionalGrantObjectWithCustomAsyncFunction);
                        _a = expect;
                        return [4 /*yield*/, acUsingObj.can('sports/custom').context(customContextAllowed)
                                .execute('create').on('profile')];
                    case 1:
                        _a.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, acUsingObj.can('sports/custom').context(customContextNotAllowed)
                                .execute('edit').on('profile')];
                    case 2:
                        _b.apply(void 0, [(_e.sent()).granted]).toEqual(false);
                        acUsingArray = new AccessControl(conditionalGrantArrayWithCustomAsyncFunction);
                        _c = expect;
                        return [4 /*yield*/, acUsingArray.can('sports/custom').context(customContextAllowed)
                                .execute('create').on('profile')];
                    case 3:
                        _c.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        _d = expect;
                        return [4 /*yield*/, acUsingArray.can('sports/custom').context(customContextNotAllowed)
                                .execute('edit').on('profile')];
                    case 4:
                        _d.apply(void 0, [(_e.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should support initializing ACL when grants has custom functions synchronously', function () {
        // Using object
        var acUsingObj = new AccessControl(conditionalGrantObjectWithCustomSyncFunction);
        expect((acUsingObj.can('sports/custom').context(customContextAllowed)
            .execute('create').sync().on('profile')).granted).toEqual(true);
        expect((acUsingObj.can('sports/custom').context(customContextNotAllowed)
            .execute('edit').sync().on('profile')).granted).toEqual(false);
        // Using array
        var acUsingArray = new AccessControl(conditionalGrantArrayWithCustomSyncFunction);
        expect((acUsingArray.can('sports/custom').context(customContextAllowed)
            .execute('create').sync().on('profile')).granted).toEqual(true);
        expect((acUsingArray.can('sports/custom').context(customContextNotAllowed)
            .execute('edit').sync().on('profile')).granted).toEqual(false);
    });
    it('should stringfy and restore ACL with async custom condition function', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, newAC, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition(function (context) {
                            return new Promise(function (resolve) {
                                setTimeout(function () {
                                    resolve(context.category !== 'politics');
                                }, 200);
                            });
                        }).execute('create').on('article');
                        newAC = AccessControl.fromJSON(ac.toJSON());
                        expect(ac.toJSON()).toEqual(newAC.toJSON());
                        _a = expect;
                        return [4 /*yield*/, newAC.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, newAC.can('user').context(categoryPoliticsContext).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        _c = expect;
                        return [4 /*yield*/, newAC.can('user').context({ category: 'tech' }).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should stringfy and restore ACL with async custom named condition function', function () {
        return __awaiter(this, void 0, void 0, function () {
            var customConditionFunctions, ac, newAC, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        customConditionFunctions = {
                            isOwner: function (context) {
                                return new Promise(function (resolve) {
                                    setTimeout(function () {
                                        resolve(context.loginUserId === context.resourceProfileId);
                                    }, 200);
                                });
                            }
                        };
                        ac = new AccessControl();
                        ac.registerConditionFunction('isOwner', customConditionFunctions.isOwner);
                        ac.grant("user").condition('custom:isOwner').execute(['create', 'edit']).on('profile');
                        newAC = AccessControl.fromJSON(ac.toJSON());
                        expect(ac.toJSON()).toEqual(newAC.toJSON());
                        _a = expect;
                        return [4 /*yield*/, newAC.can('user').context(customContextAllowed)
                                .execute('create').on('profile')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, newAC.can('user').context(customContextNotAllowed)
                                .execute('edit').on('profile')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should stringfy and restore ACL with sync custom condition function', function () {
        var ac = this.ac;
        ac.grant('user').condition(function (context) {
            return context.category !== 'politics';
        }).execute('create').on('article');
        var newAC = AccessControl.fromJSON(ac.toJSON());
        expect(ac.toJSON()).toEqual(newAC.toJSON());
        expect((newAC.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(true);
        expect((newAC.can('user').context(categoryPoliticsContext).execute('create').sync().on('article')).granted).toEqual(false);
        expect((newAC.can('user').context({ category: 'tech' }).execute('create').sync().on('article')).granted).toEqual(true);
    });
    it('should not grant access with and with async custom bad condition function', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition(function (context) {
                            return new Promise(function (resolve, reject) {
                                setTimeout(function () {
                                    reject('I am bad function');
                                }, 200);
                            });
                        }).execute('create').on('article');
                        return [4 /*yield*/, promiseThrowsError(ac.can('user').context(categorySportsContext).execute('create').on('article'))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should not grant access with and with sync custom bad condition function', function () {
        var ac = this.ac;
        ac.grant('user').condition(function (context) {
            throw new Error('I am bad function');
        }).execute('create').on('article');
        throwsError(function () { return ac.can('user').context(categorySportsContext).execute('create').sync().on('article'); });
    });
    it('should grant access with and condition with single value and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'AND',
                            args: {
                                Fn: 'NOT_EQUALS',
                                args: {
                                    'category': 'sports'
                                }
                            }
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context({ category: 'tech' }).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with and condition with single value and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'AND',
            args: {
                Fn: 'NOT_EQUALS',
                args: {
                    'category': 'sports'
                }
            }
        }).execute('create').on('article');
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(false);
        expect((ac.can('user').context({ category: 'tech' }).execute('create').sync().on('article')).granted).toEqual(true);
    });
    it('should grant access with not condition on list of values and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'NOT',
                            args: [
                                {
                                    Fn: 'EQUALS',
                                    args: {
                                        'category': 'sports'
                                    }
                                },
                                {
                                    Fn: 'EQUALS',
                                    args: {
                                        'category': 'politics'
                                    }
                                }
                            ]
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context(categoryPoliticsContext).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context({ category: 'tech' }).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with not condition on list of values and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'NOT',
            args: [
                {
                    Fn: 'EQUALS',
                    args: {
                        'category': 'sports'
                    }
                },
                {
                    Fn: 'EQUALS',
                    args: {
                        'category': 'politics'
                    }
                }
            ]
        }).execute('create').on('article');
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(false);
        expect((ac.can('user').context(categoryPoliticsContext).execute('create').sync().on('article')).granted).toEqual(false);
        expect((ac.can('user').context({ category: 'tech' }).execute('create').sync().on('article')).granted).toEqual(true);
    });
    it('should grant access with not condition on single value and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'NOT',
                            args: {
                                Fn: 'EQUALS',
                                args: {
                                    'category': 'sports'
                                }
                            }
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context({ category: 'tech' }).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with not condition on single value and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'NOT',
            args: {
                Fn: 'EQUALS',
                args: {
                    'category': 'sports'
                }
            }
        }).execute('create').on('article');
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(false);
        expect((ac.can('user').context({ category: 'tech' }).execute('create').sync().on('article')).granted).toEqual(true);
    });
    it('should grant access with list contains condition on single value and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'LIST_CONTAINS',
                            args: {
                                tags: 'sports'
                            }
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context({ tags: ['sports'] }).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context({ tags: ['politics'] }).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with list contains condition on single value and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'LIST_CONTAINS',
            args: {
                tags: 'sports'
            }
        }).execute('create').on('article');
        expect((ac.can('user').context({ tags: ['sports'] }).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context({ tags: ['politics'] }).execute('create').sync().on('article')).granted).toEqual(false);
    });
    it('should grant access with starts with condition on single value and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'STARTS_WITH',
                            args: {
                                tags: 'sports'
                            }
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context({ tags: 'sports' }).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context({ tags: 'politics' }).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with starts with condition on single value and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'STARTS_WITH',
            args: {
                tags: '$.category'
            }
        }).execute('create').on('article');
        expect((ac.can('user').context({ tags: 'sports', category: 'sports' }).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context({ tags: 'politics' }).execute('create').sync().on('article')).granted).toEqual(false);
    });
    it('should grant access with starts with condition with list value and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'STARTS_WITH',
                            args: {
                                tags: ['$.mainCategory', '$.subCategory']
                            }
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context({ tags: 'sports', mainCategory: 'sports' }).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context({ tags: 'politics', subCategory: 'politics' }).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context({ tags: 'tech' }).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with starts with condition with list value and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'STARTS_WITH',
            args: {
                '$.tags': ['$.mainCategory', '$.subCategory']
            }
        }).execute('create').on('article');
        expect((ac.can('user').context({ tags: 'sports', mainCategory: 'sports' }).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context({ tags: 'politics', subCategory: 'politics' }).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context({ tags: 'tech' }).execute('create').sync().on('article')).granted).toEqual(false);
    });
    it('should grant access with list contains condition with multiple value and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition({
                            Fn: 'LIST_CONTAINS',
                            args: {
                                '$.tags': ['sports', 'politics']
                            }
                        }).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context({ tags: ['sports'] }).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context({ tags: ['politics'] }).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context({ tags: ['tech'] }).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access with list contains condition with multiple value and check permissions synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition({
            Fn: 'LIST_CONTAINS',
            args: {
                tags: ['sports', 'politics']
            }
        }).execute('create').on('article');
        expect((ac.can('user').context({ tags: ['sports'] }).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context({ tags: ['politics'] }).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context({ tags: ['tech'] }).execute('create').sync().on('article')).granted).toEqual(false);
    });
    it('should grant access to attribute based on conditions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, sportsAttrs, politicsAttrs, _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        ac = this.ac;
                        sportsAttrs = ['sportsField'];
                        politicsAttrs = ['politicsField'];
                        ac.grant('user').condition(categorySportsCondition).execute('create').on('article', sportsAttrs);
                        ac.grant('user').condition(categoryPoliticsCondition).attributes(politicsAttrs).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').context(categorySportsContext).execute('create').on('article')];
                    case 2:
                        _b.apply(void 0, [(_e.sent()).attributes]).toEqual(sportsAttrs);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').context(categoryPoliticsContext).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        _d = expect;
                        return [4 /*yield*/, ac.can('user').context(categoryPoliticsContext).execute('create').on('article')];
                    case 4:
                        _d.apply(void 0, [(_e.sent()).attributes]).toEqual(politicsAttrs);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access to attribute based on conditions synchronously', function () {
        var ac = this.ac;
        var sportsAttrs = ['sportsField'];
        var politicsAttrs = ['politicsField'];
        ac.grant('user').condition(categorySportsCondition).execute('create').on('article', sportsAttrs);
        ac.grant('user').condition(categoryPoliticsCondition).attributes(politicsAttrs).execute('create').on('article');
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context(categorySportsContext).execute('create').sync().on('article')).attributes).toEqual(sportsAttrs);
        expect((ac.can('user').context(categoryPoliticsContext).execute('create').sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').context(categoryPoliticsContext).execute('create').sync().on('article')).attributes).toEqual(politicsAttrs);
    });
    it('should add conditional grants with list and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, editorAttrs, writerAttrs, _a, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        ac = this.ac;
                        ac.setGrants(conditionalGrantList);
                        editorAttrs = ['*'];
                        writerAttrs = ['*', '!status'];
                        _a = expect;
                        return [4 /*yield*/, ac.can('sports/editor').context(categorySportsContext).execute('create').on('article')];
                    case 1:
                        _a.apply(void 0, [(_f.sent()).attributes]).toEqual(editorAttrs);
                        _b = expect;
                        return [4 /*yield*/, ac.can('sports/editor').context(categoryPoliticsContext).execute('update').on('article')];
                    case 2:
                        _b.apply(void 0, [(_f.sent()).granted]).toEqual(false);
                        _c = expect;
                        return [4 /*yield*/, ac.can('sports/writer').context(categorySportsContext).execute('create').on('article')];
                    case 3:
                        _c.apply(void 0, [(_f.sent()).attributes]).toEqual(writerAttrs);
                        _d = expect;
                        return [4 /*yield*/, ac.can('sports/writer').context(categoryPoliticsContext).execute('update').on('article')];
                    case 4:
                        _d.apply(void 0, [(_f.sent()).granted]).toEqual(false);
                        // should fail when context is not passed
                        _e = expect;
                        return [4 /*yield*/, ac.can('sports/writer').execute('create').on('article')];
                    case 5:
                        // should fail when context is not passed
                        _e.apply(void 0, [(_f.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should add conditional grants with list and check permissions synchronously', function () {
        var ac = this.ac;
        ac.setGrants(conditionalGrantList);
        var editorAttrs = ['*'];
        var writerAttrs = ['*', '!status'];
        expect((ac.can('sports/editor').context(categorySportsContext).execute('create').sync().on('article')).attributes).toEqual(editorAttrs);
        expect((ac.can('sports/editor').context(categoryPoliticsContext).execute('update').sync().on('article')).granted).toEqual(false);
        expect((ac.can('sports/writer').context(categorySportsContext).execute('create').sync().on('article')).attributes).toEqual(writerAttrs);
        expect((ac.can('sports/writer').context(categoryPoliticsContext).execute('update').sync().on('article')).granted).toEqual(false);
        // should fail when context is not passed
        expect((ac.can('sports/writer').execute('create').sync().on('article')).granted).toEqual(false);
    });
    it('should chain grant methods and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, attrs, _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        ac = this.ac, attrs = ['*'];
                        ac.grant('superadmin')
                            .execute('create').on('profile', attrs)
                            .execute('read').on('profile', attrs)
                            .execute('create').on('video', []) // no attributes allowed
                            .execute('create').on('photo'); // all attributes allowed
                        _a = expect;
                        return [4 /*yield*/, ac.can('superadmin').execute('create').on('profile')];
                    case 1:
                        _a.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('superadmin').execute('read').on('profile')];
                    case 2:
                        _b.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('superadmin').execute('create').on('video')];
                    case 3:
                        _c.apply(void 0, [(_e.sent()).granted]).toEqual(false);
                        _d = expect;
                        return [4 /*yield*/, ac.can('superadmin').execute('create').on('photo')];
                    case 4:
                        _d.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should chain grant methods and check permissions synchronously', function () {
        var ac = this.ac, attrs = ['*'];
        ac.grant('superadmin')
            .execute('create').on('profile', attrs)
            .execute('read').on('profile', attrs)
            .execute('create').on('video', []) // no attributes allowed
            .execute('create').on('photo'); // all attributes allowed
        expect((ac.can('superadmin').execute('create').sync().on('profile')).granted).toEqual(true);
        expect((ac.can('superadmin').execute('read').sync().on('profile')).granted).toEqual(true);
        expect((ac.can('superadmin').execute('create').sync().on('video')).granted).toEqual(false);
        expect((ac.can('superadmin').execute('create').sync().on('photo')).granted).toEqual(true);
    });
    it('should grant access via object and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, attrs, o1, o2, o3, _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        ac = this.ac, attrs = ['*'];
                        o1 = {
                            role: 'moderator',
                            resource: 'post',
                            action: 'create',
                            attributes: ['*'] // grant only
                        };
                        o2 = {
                            role: 'moderator',
                            resource: 'news',
                            action: 'read',
                            attributes: ['*'] // grant only
                        };
                        o3 = {
                            role: 'moderator',
                            resource: 'book',
                            // no action set
                            attributes: ['*'] // grant only
                        };
                        ac.grant(o1).grant(o2);
                        ac.grant(o3).execute('update').on();
                        _a = expect;
                        return [4 /*yield*/, ac.can('moderator').execute('create').on('post')];
                    case 1:
                        _a.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('moderator').execute('read').on('news')];
                    case 2:
                        _b.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('moderator').execute('update').on('book')];
                    case 3:
                        _c.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        // should overwrite already defined action in o1 object
                        ac.grant(o1).execute('read').on();
                        _d = expect;
                        return [4 /*yield*/, ac.can('moderator').execute('read').on('post')];
                    case 4:
                        _d.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        // non-set action (update:own)
                        _e = expect;
                        return [4 /*yield*/, ac.can('moderator').execute('update').on('news')];
                    case 5:
                        // non-set action (update:own)
                        _e.apply(void 0, [(_g.sent()).granted]).toEqual(false);
                        // non-existent resource
                        _f = expect;
                        return [4 /*yield*/, ac.can('moderator').execute('create').on('foo')];
                    case 6:
                        // non-existent resource
                        _f.apply(void 0, [(_g.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access via object and check permissions synchronously', function () {
        var ac = this.ac, attrs = ['*'];
        var o1 = {
            role: 'moderator',
            resource: 'post',
            action: 'create',
            attributes: ['*'] // grant only
        };
        var o2 = {
            role: 'moderator',
            resource: 'news',
            action: 'read',
            attributes: ['*'] // grant only
        };
        var o3 = {
            role: 'moderator',
            resource: 'book',
            // no action set
            attributes: ['*'] // grant only
        };
        ac.grant(o1).grant(o2);
        ac.grant(o3).execute('update').on();
        expect((ac.can('moderator').execute('create').sync().on('post')).granted).toEqual(true);
        expect((ac.can('moderator').execute('read').sync().on('news')).granted).toEqual(true);
        expect((ac.can('moderator').execute('update').sync().on('book')).granted).toEqual(true);
        // should overwrite already defined action in o1 object
        ac.grant(o1).execute('read').on();
        expect((ac.can('moderator').execute('read').sync().on('post')).granted).toEqual(true);
        // non-set action (update:own)
        expect((ac.can('moderator').execute('update').sync().on('news')).granted).toEqual(false);
        // non-existent resource
        expect((ac.can('moderator').execute('create').sync().on('foo')).granted).toEqual(false);
    });
    it('should grant conditional access via object and check permissions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, attrs, o1, o2, o3, _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        ac = this.ac, attrs = ['*'];
                        o1 = {
                            role: 'moderator',
                            resource: 'post',
                            action: 'create',
                            attributes: ['*'],
                            condition: categorySportsCondition
                        };
                        o2 = {
                            role: 'moderator',
                            resource: 'news',
                            action: 'read',
                            attributes: ['*'],
                            condition: categorySportsCondition
                        };
                        o3 = {
                            role: 'moderator',
                            resource: 'book',
                            // no action set
                            attributes: ['*'] // grant only
                        };
                        ac.grant(o1).grant(o2);
                        ac.grant(o3).execute('update').on();
                        _a = expect;
                        return [4 /*yield*/, ac.can('moderator').context(categorySportsContext).execute('create').on('post')];
                    case 1:
                        _a.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('moderator').context(categorySportsContext).execute('read').on('news')];
                    case 2:
                        _b.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('moderator').context(categorySportsContext).execute('update').on('book')];
                    case 3:
                        _c.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        // should overwrite already defined action in o1 object
                        ac.grant(o1).execute('read').on();
                        _d = expect;
                        return [4 /*yield*/, ac.can('moderator').context(categorySportsContext).execute('read').on('post')];
                    case 4:
                        _d.apply(void 0, [(_g.sent()).granted]).toEqual(true);
                        // non-set action (update:own)
                        _e = expect;
                        return [4 /*yield*/, ac.can('moderator').context(categorySportsContext).execute('update').on('news')];
                    case 5:
                        // non-set action (update:own)
                        _e.apply(void 0, [(_g.sent()).granted]).toEqual(false);
                        // non-existent resource
                        _f = expect;
                        return [4 /*yield*/, ac.can('moderator').context(categorySportsContext).execute('create').on('foo')];
                    case 6:
                        // non-existent resource
                        _f.apply(void 0, [(_g.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant conditional access via object and check permissions synchronously', function () {
        var ac = this.ac, attrs = ['*'];
        var o1 = {
            role: 'moderator',
            resource: 'post',
            action: 'create',
            attributes: ['*'],
            condition: categorySportsCondition
        };
        var o2 = {
            role: 'moderator',
            resource: 'news',
            action: 'read',
            attributes: ['*'],
            condition: categorySportsCondition
        };
        var o3 = {
            role: 'moderator',
            resource: 'book',
            // no action set
            attributes: ['*'] // grant only
        };
        ac.grant(o1).grant(o2);
        ac.grant(o3).execute('update').on();
        expect((ac.can('moderator').context(categorySportsContext).execute('create').sync().on('post')).granted).toEqual(true);
        expect((ac.can('moderator').context(categorySportsContext).execute('read').sync().on('news')).granted).toEqual(true);
        expect((ac.can('moderator').context(categorySportsContext).execute('update').sync().on('book')).granted).toEqual(true);
        // should overwrite already defined action in o1 object
        ac.grant(o1).execute('read').on();
        expect((ac.can('moderator').context(categorySportsContext).execute('read').sync().on('post')).granted).toEqual(true);
        // non-set action (update:own)
        expect((ac.can('moderator').context(categorySportsContext).execute('update').sync().on('news')).granted).toEqual(false);
        // non-existent resource
        expect((ac.can('moderator').context(categorySportsContext).execute('create').sync().on('foo')).granted).toEqual(false);
    });
    it('should skip conditions when skipConditions is used', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c, _d, _e, _f, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition(categorySportsCondition).execute('create').on('article');
                        _a = expect;
                        return [4 /*yield*/, ac.permission({
                                role: 'user', action: 'create', resource: 'article', context: categorySportsContext
                            })];
                    case 1:
                        _a.apply(void 0, [(_h.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('user').execute('create').with(categorySportsContext).on('article')];
                    case 2:
                        _b.apply(void 0, [(_h.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').execute('create').on('article', true)];
                    case 3:
                        _c.apply(void 0, [(_h.sent()).granted]).toEqual(true); // conditions skipped
                        _d = expect;
                        return [4 /*yield*/, ac.can('user').execute('create').on('article', false)];
                    case 4:
                        _d.apply(void 0, [(_h.sent()).granted]).toEqual(false); // context not set
                        _e = expect;
                        return [4 /*yield*/, ac.can('user').execute('create').on('article')];
                    case 5:
                        _e.apply(void 0, [(_h.sent()).granted]).toEqual(false); // context not set
                        _f = expect;
                        return [4 /*yield*/, ac.permission({ role: 'user', action: 'create', resource: 'article' })];
                    case 6:
                        _f.apply(void 0, [(_h.sent()).granted]).toEqual(false); // context not set
                        // context not set and conditions skipped
                        _g = expect;
                        return [4 /*yield*/, ac.permission({ role: 'user', action: 'create', resource: 'article', skipConditions: true })];
                    case 7:
                        // context not set and conditions skipped
                        _g.apply(void 0, [(_h.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should skip conditions when skipConditions is used synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition(categorySportsCondition).execute('create').on('article');
        expect((ac.permissionSync({
            role: 'user', action: 'create', resource: 'article', context: categorySportsContext
        })).granted).toEqual(true);
        expect((ac.can('user').execute('create').with(categorySportsContext).sync().on('article')).granted).toEqual(true);
        expect((ac.can('user').execute('create').sync().on('article', true)).granted).toEqual(true); // conditions skipped
        expect((ac.can('user').execute('create').sync().on('article', false)).granted).toEqual(false); // context not set
        expect((ac.can('user').execute('create').sync().on('article')).granted).toEqual(false); // context not set
        expect((ac.permissionSync({ role: 'user', action: 'create', resource: 'article' })).granted).toEqual(false); // context not set
        // context not set and conditions skipped
        expect((ac.permissionSync({ role: 'user', action: 'create', resource: 'article', skipConditions: true })).granted).toEqual(true);
    });
    it('should return allowed resources for given roles', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition(categorySportsCondition).execute('create').on('article');
                        ac.grant('user').execute('*').on('image');
                        ac.extendRole('admin', 'user');
                        ac.grant('admin').execute('*').on('category');
                        ac.extendRole('owner', 'admin');
                        ac.grant('owner').execute('*').on('video');
                        _a = expect;
                        return [4 /*yield*/, ac.allowedResources({ role: 'user' })];
                    case 1:
                        _a.apply(void 0, [(_g.sent()).sort()]).toEqual(['article', 'image']);
                        _b = expect;
                        return [4 /*yield*/, ac.allowedResources({ role: 'user', context: categorySportsContext })];
                    case 2:
                        _b.apply(void 0, [(_g.sent()).sort()]).toEqual(['article', 'image']);
                        _c = expect;
                        return [4 /*yield*/, ac.allowedResources({ role: 'user', context: categoryPoliticsContext })];
                    case 3:
                        _c.apply(void 0, [(_g.sent()).sort()]).toEqual(['image']);
                        _d = expect;
                        return [4 /*yield*/, ac.allowedResources({ role: 'admin' })];
                    case 4:
                        _d.apply(void 0, [(_g.sent()).sort()]).toEqual(['article', 'category', 'image']);
                        _e = expect;
                        return [4 /*yield*/, ac.allowedResources({ role: 'owner' })];
                    case 5:
                        _e.apply(void 0, [(_g.sent()).sort()]).toEqual(['article', 'category', 'image', 'video']);
                        _f = expect;
                        return [4 /*yield*/, ac.allowedResources({ role: ['admin', 'owner'] })];
                    case 6:
                        _f.apply(void 0, [(_g.sent()).sort()]).toEqual(['article', 'category', 'image', 'video']);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should return allowed resources for given roles synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition(categorySportsCondition).execute('create').on('article');
        ac.grant('user').execute('*').on('image');
        ac.extendRole('admin', 'user');
        ac.grant('admin').execute('*').on('category');
        ac.extendRole('owner', 'admin');
        ac.grant('owner').execute('*').on('video');
        expect((ac.allowedResourcesSync({ role: 'user' })).sort()).toEqual(['article', 'image']);
        expect((ac.allowedResourcesSync({ role: 'user', context: categorySportsContext })).sort()).toEqual(['article', 'image']);
        expect((ac.allowedResourcesSync({ role: 'user', context: categoryPoliticsContext })).sort()).toEqual(['image']);
        expect((ac.allowedResourcesSync({ role: 'admin' })).sort()).toEqual(['article', 'category', 'image']);
        expect((ac.allowedResourcesSync({ role: 'owner' })).sort()).toEqual(['article', 'category', 'image', 'video']);
        expect((ac.allowedResourcesSync({ role: ['admin', 'owner'] })).sort()).toEqual(['article', 'category', 'image', 'video']);
    });
    it('should return allowed actions for given roles and resource', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('user').condition(categorySportsCondition).execute('create').on('article');
                        ac.grant('user').execute('*').on('image');
                        ac.extendRole('admin', 'user');
                        ac.grant('admin').execute('delete').on('article');
                        ac.grant('admin').execute('*').on('category');
                        ac.extendRole('owner', 'admin');
                        ac.grant('owner').execute('*').on('video');
                        _a = expect;
                        return [4 /*yield*/, ac.allowedActions({ role: 'user', resource: 'article' })];
                    case 1:
                        _a.apply(void 0, [(_g.sent()).sort()]).toEqual(['create']);
                        _b = expect;
                        return [4 /*yield*/, ac.allowedActions({ role: 'user', resource: 'article', context: categorySportsContext })];
                    case 2:
                        _b.apply(void 0, [(_g.sent()).sort()]).toEqual(['create']);
                        _c = expect;
                        return [4 /*yield*/, ac.allowedActions({ role: 'user', resource: 'article', context: categoryPoliticsContext })];
                    case 3:
                        _c.apply(void 0, [(_g.sent())]).toEqual([]);
                        _d = expect;
                        return [4 /*yield*/, ac.allowedActions({ role: ['admin', 'user'], resource: 'article' })];
                    case 4:
                        _d.apply(void 0, [(_g.sent()).sort()]).toEqual(['create', 'delete']);
                        _e = expect;
                        return [4 /*yield*/, ac.allowedActions({ role: 'admin', resource: 'category' })];
                    case 5:
                        _e.apply(void 0, [(_g.sent()).sort()]).toEqual(['*']);
                        _f = expect;
                        return [4 /*yield*/, ac.allowedActions({ role: 'owner', resource: 'video' })];
                    case 6:
                        _f.apply(void 0, [(_g.sent()).sort()]).toEqual(['*']);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should return allowed actions for given roles and resource synchronously', function () {
        var ac = this.ac;
        ac.grant('user').condition(categorySportsCondition).execute('create').on('article');
        ac.grant('user').execute('*').on('image');
        ac.extendRole('admin', 'user');
        ac.grant('admin').execute('delete').on('article');
        ac.grant('admin').execute('*').on('category');
        ac.extendRole('owner', 'admin');
        ac.grant('owner').execute('*').on('video');
        expect((ac.allowedActionsSync({ role: 'user', resource: 'article' })).sort()).toEqual(['create']);
        expect((ac.allowedActionsSync({ role: 'user', resource: 'article', context: categorySportsContext })).sort()).toEqual(['create']);
        expect((ac.allowedActionsSync({ role: 'user', resource: 'article', context: categoryPoliticsContext }))).toEqual([]);
        expect((ac.allowedActionsSync({ role: ['admin', 'user'], resource: 'article' })).sort()).toEqual(['create', 'delete']);
        expect((ac.allowedActionsSync({ role: 'admin', resource: 'category' })).sort()).toEqual(['*']);
        expect((ac.allowedActionsSync({ role: 'owner', resource: 'video' })).sort()).toEqual(['*']);
    });
    it('should return allowing roles for given permission', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c, _d, _e, _f, _g, _h;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        ac = this.ac;
                        ac.setGrants(conditionalGrantObject);
                        ac.grant('user').condition(categorySportsCondition).execute('create').on('blog');
                        ac.grant('user').execute('*').on('image');
                        ac.extendRole('sports/editor', 'user');
                        ac.extendRole('admin', 'user');
                        ac.grant('admin').execute('*').on('category');
                        ac.extendRole('owner', 'admin');
                        ac.grant('owner').execute('*').on('video');
                        ac.grant('owner').execute('*').on('role');
                        _a = expect;
                        return [4 /*yield*/, ac.allowingRoles({ resource: 'image', action: 'create' })];
                    case 1:
                        _a.apply(void 0, [(_j.sent()).sort()]).toEqual(['admin', 'owner', 'sports/editor', 'user']);
                        _b = expect;
                        return [4 /*yield*/, ac.allowingRoles({ resource: 'video', action: 'create' })];
                    case 2:
                        _b.apply(void 0, [(_j.sent()).sort()]).toEqual(['owner']);
                        _c = expect;
                        return [4 /*yield*/, ac.allowingRoles({ resource: 'category', action: 'create' })];
                    case 3:
                        _c.apply(void 0, [(_j.sent()).sort()]).toEqual(['admin', 'owner']);
                        _d = expect;
                        return [4 /*yield*/, ac.allowingRoles({ resource: 'blog', action: 'create' })];
                    case 4:
                        _d.apply(void 0, [(_j.sent())]).toEqual([]);
                        _e = expect;
                        return [4 /*yield*/, ac.allowingRoles({ resource: 'blog', action: 'create', context: categoryPoliticsContext })];
                    case 5:
                        _e.apply(void 0, [(_j.sent())]).toEqual([]);
                        _f = expect;
                        return [4 /*yield*/, ac.allowingRoles({
                                resource: 'blog',
                                action: 'create',
                                context: categorySportsContext
                            })];
                    case 6:
                        _f.apply(void 0, [(_j.sent()).sort()]).toEqual(['admin', 'owner', 'sports/editor', 'user']);
                        _g = expect;
                        return [4 /*yield*/, ac.allowingRoles({
                                resource: 'article',
                                action: 'create',
                                context: categorySportsContext
                            })];
                    case 7:
                        _g.apply(void 0, [(_j.sent()).sort()]).toEqual(['sports/editor', 'sports/writer']);
                        // should adjust permissions when role is removed
                        ac.removeRoles('user');
                        _h = expect;
                        return [4 /*yield*/, ac.allowingRoles({
                                resource: 'blog',
                                action: 'create',
                                context: categorySportsContext
                            })];
                    case 8:
                        _h.apply(void 0, [(_j.sent()).sort()]).toEqual([]);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should return allowing roles for given permission synchronously', function () {
        var ac = this.ac;
        ac.setGrants(conditionalGrantObject);
        ac.grant('user').condition(categorySportsCondition).execute('create').on('blog');
        ac.grant('user').execute('*').on('image');
        ac.extendRole('sports/editor', 'user');
        ac.extendRole('admin', 'user');
        ac.grant('admin').execute('*').on('category');
        ac.extendRole('owner', 'admin');
        ac.grant('owner').execute('*').on('video');
        ac.grant('owner').execute('*').on('role');
        expect((ac.allowingRolesSync({ resource: 'image', action: 'create' })).sort()).toEqual(['admin', 'owner', 'sports/editor', 'user']);
        expect((ac.allowingRolesSync({ resource: 'video', action: 'create' })).sort()).toEqual(['owner']);
        expect((ac.allowingRolesSync({ resource: 'category', action: 'create' })).sort()).toEqual(['admin', 'owner']);
        expect((ac.allowingRolesSync({ resource: 'blog', action: 'create' }))).toEqual([]);
        expect((ac.allowingRolesSync({ resource: 'blog', action: 'create', context: categoryPoliticsContext }))).toEqual([]);
        expect((ac.allowingRolesSync({
            resource: 'blog',
            action: 'create',
            context: categorySportsContext
        })).sort()).toEqual(['admin', 'owner', 'sports/editor', 'user']);
        expect((ac.allowingRolesSync({
            resource: 'article',
            action: 'create',
            context: categorySportsContext
        })).sort()).toEqual(['sports/editor', 'sports/writer']);
        // should adjust permissions when role is removed
        ac.removeRoles('user');
        expect((ac.allowingRolesSync({
            resource: 'blog',
            action: 'create',
            context: categorySportsContext
        })).sort()).toEqual([]);
    });
    it('should grant access (variation, chained)', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        ac = this.ac;
                        ac.setGrants(grantsObject);
                        _a = expect;
                        return [4 /*yield*/, ac.can('admin').execute('create').on('video')];
                    case 1:
                        _a.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        ac.grant('foo').execute('create').on('bar');
                        _b = expect;
                        return [4 /*yield*/, ac.can('foo').execute('create').on('bar')];
                    case 2:
                        _b.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        ac.grant('foo').execute('create').on('baz', []); // no attributes, actually denied instead of granted
                        _c = expect;
                        return [4 /*yield*/, ac.can('foo').execute('create').on('baz')];
                    case 3:
                        _c.apply(void 0, [(_q.sent()).granted]).toEqual(false);
                        ac.grant('qux')
                            .execute('create').on('resource1')
                            .execute('update').on('resource2')
                            .execute('read').on('resource1')
                            .execute('delete').on('resource1', []);
                        _d = expect;
                        return [4 /*yield*/, ac.can('qux').execute('create').on('resource1')];
                    case 4:
                        _d.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        _e = expect;
                        return [4 /*yield*/, ac.can('qux').execute('update').on('resource2')];
                    case 5:
                        _e.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        _f = expect;
                        return [4 /*yield*/, ac.can('qux').execute('read').on('resource1')];
                    case 6:
                        _f.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        _g = expect;
                        return [4 /*yield*/, ac.can('qux').execute('delete').on('resource1')];
                    case 7:
                        _g.apply(void 0, [(_q.sent()).granted]).toEqual(false);
                        ac.grant('editor').resource('file1').execute('update').on();
                        ac.grant().role('editor').execute('update').on('file2');
                        ac.grant().role('editor').resource('file3').execute('update').on();
                        _h = expect;
                        return [4 /*yield*/, ac.can('editor').execute('update').on('file1')];
                    case 8:
                        _h.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        _j = expect;
                        return [4 /*yield*/, ac.can('editor').execute('update').on('file2')];
                    case 9:
                        _j.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        _k = expect;
                        return [4 /*yield*/, ac.can('editor').execute('update').on('file3')];
                    case 10:
                        _k.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        ac.grant('editor')
                            .resource('fileX').execute('read').on().execute('create').on()
                            .resource('fileY').execute('update').on().execute('delete').on();
                        _l = expect;
                        return [4 /*yield*/, ac.can('editor').execute('read').on('fileX')];
                    case 11:
                        _l.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        _m = expect;
                        return [4 /*yield*/, ac.can('editor').execute('create').on('fileX')];
                    case 12:
                        _m.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        _o = expect;
                        return [4 /*yield*/, ac.can('editor').execute('update').on('fileY')];
                    case 13:
                        _o.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        _p = expect;
                        return [4 /*yield*/, ac.can('editor').execute('delete').on('fileY')];
                    case 14:
                        _p.apply(void 0, [(_q.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant access (variation, chained) synchronously', function () {
        var ac = this.ac;
        ac.setGrants(grantsObject);
        expect((ac.can('admin').execute('create').sync().on('video')).granted).toEqual(true);
        ac.grant('foo').execute('create').on('bar');
        expect((ac.can('foo').execute('create').sync().on('bar')).granted).toEqual(true);
        ac.grant('foo').execute('create').on('baz', []); // no attributes, actually denied instead of granted
        expect((ac.can('foo').execute('create').sync().on('baz')).granted).toEqual(false);
        ac.grant('qux')
            .execute('create').on('resource1')
            .execute('update').on('resource2')
            .execute('read').on('resource1')
            .execute('delete').on('resource1', []);
        expect((ac.can('qux').execute('create').sync().on('resource1')).granted).toEqual(true);
        expect((ac.can('qux').execute('update').sync().on('resource2')).granted).toEqual(true);
        expect((ac.can('qux').execute('read').sync().on('resource1')).granted).toEqual(true);
        expect((ac.can('qux').execute('delete').sync().on('resource1')).granted).toEqual(false);
        ac.grant('editor').resource('file1').execute('update').on();
        ac.grant().role('editor').execute('update').on('file2');
        ac.grant().role('editor').resource('file3').execute('update').on();
        expect((ac.can('editor').execute('update').sync().on('file1')).granted).toEqual(true);
        expect((ac.can('editor').execute('update').sync().on('file2')).granted).toEqual(true);
        expect((ac.can('editor').execute('update').sync().on('file3')).granted).toEqual(true);
        ac.grant('editor')
            .resource('fileX').execute('read').on().execute('create').on()
            .resource('fileY').execute('update').on().execute('delete').on();
        expect((ac.can('editor').execute('read').sync().on('fileX')).granted).toEqual(true);
        expect((ac.can('editor').execute('create').sync().on('fileX')).granted).toEqual(true);
        expect((ac.can('editor').execute('update').sync().on('fileY')).granted).toEqual(true);
        expect((ac.can('editor').execute('delete').sync().on('fileY')).granted).toEqual(true);
    });
    it('should switch-chain grant roles', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('r1')
                            .execute('create').on('a')
                            .grant('r2')
                            .execute('create').on('b')
                            .execute('read').on('b')
                            .grant('r1')
                            .execute('update').on('c');
                        _a = expect;
                        return [4 /*yield*/, ac.can('r1').execute('create').on('a')];
                    case 1:
                        _a.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('r1').execute('update').on('c')];
                    case 2:
                        _b.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('r2').execute('create').on('b')];
                    case 3:
                        _c.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        _d = expect;
                        return [4 /*yield*/, ac.can('r2').execute('read').on('b')];
                    case 4:
                        _d.apply(void 0, [(_e.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should switch-chain grant roles synchronously', function () {
        var ac = this.ac;
        ac.grant('r1')
            .execute('create').on('a')
            .grant('r2')
            .execute('create').on('b')
            .execute('read').on('b')
            .grant('r1')
            .execute('update').on('c');
        expect((ac.can('r1').execute('create').sync().on('a')).granted).toEqual(true);
        expect((ac.can('r1').execute('update').sync().on('c')).granted).toEqual(true);
        expect((ac.can('r2').execute('create').sync().on('b')).granted).toEqual(true);
        expect((ac.can('r2').execute('read').sync().on('b')).granted).toEqual(true);
    });
    it('should grant comma/semi-colon separated roles', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac;
            return __generator(this, function (_a) {
                ac = this.ac;
                // also supporting comma/semi-colon separated roles
                ac.grant('role2; role3, editor; viewer, agent').execute('create').on('book');
                expect(ac.hasRole('role3')).toEqual(true);
                expect(ac.hasRole('editor')).toEqual(true);
                expect(ac.hasRole('agent')).toEqual(true);
                return [2 /*return*/];
            });
        });
    });
    it('permission should also return queried role(s) and resource', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        // also supporting comma/semi-colon separated roles
                        ac.grant('foo, bar').execute('create').on('baz');
                        _a = expect;
                        return [4 /*yield*/, ac.can('bar').execute('create').on('baz')];
                    case 1:
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        // returned permission should provide queried role(s) as array
                        _b = expect;
                        return [4 /*yield*/, ac.can('foo').execute('create').on('baz')];
                    case 2:
                        // returned permission should provide queried role(s) as array
                        _b.apply(void 0, [(_d.sent()).roles]).toContain('foo');
                        // returned permission should provide queried resource
                        _c = expect;
                        return [4 /*yield*/, ac.can('foo').execute('create').on('baz')];
                    case 3:
                        // returned permission should provide queried resource
                        _c.apply(void 0, [(_d.sent()).resource]).toEqual('baz');
                        return [2 /*return*/];
                }
            });
        });
    });
    it('permission should also return queried role(s) and resource synchronously', function () {
        var ac = this.ac;
        // also supporting comma/semi-colon separated roles
        ac.grant('foo, bar').execute('create').on('baz');
        expect((ac.can('bar').execute('create').sync().on('baz')).granted).toEqual(true);
        // returned permission should provide queried role(s) as array
        expect((ac.can('foo').execute('create').sync().on('baz')).roles).toContain('foo');
        // returned permission should provide queried resource
        expect((ac.can('foo').execute('create').sync().on('baz')).resource).toEqual('baz');
        // create is execute("create").on. but above only returns the queried value, not the result.
    });
    it('should extend / remove roles', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('admin').execute('create').on('book');
                        ac.extendRole('onur', 'admin');
                        expect(ac.getGrants().onur.$extend['admin']).toEqual({ condition: undefined });
                        ac.grant('role2, role3, editor, viewer, agent').execute('create').on('book');
                        ac.extendRole('onur', ['role2', 'role3']);
                        expect(Object.keys(ac.getGrants().onur.$extend).sort()).toEqual(['admin', 'role2', 'role3']);
                        return [4 /*yield*/, ac.grant('admin').extend('editor')];
                    case 1:
                        _a.sent();
                        expect(Object.keys(ac.getGrants().admin.$extend)).toEqual(['editor']);
                        return [4 /*yield*/, ac.grant('admin').extend(['viewer', 'editor', 'agent'])];
                    case 2:
                        (_a.sent()).execute('read').on('video');
                        expect(Object.keys(ac.getGrants().admin.$extend).sort()).toEqual(['agent', 'editor', 'viewer']);
                        return [4 /*yield*/, ac.grant(['editor', 'agent']).extend(['role2', 'role3'])];
                    case 3:
                        (_a.sent()).execute('update').on('photo');
                        expect(Object.keys(ac.getGrants().editor.$extend).sort()).toEqual(['role2', 'role3']);
                        ac.removeRoles(['editor', 'agent']);
                        expect(ac.getGrants().editor).toBeUndefined();
                        expect(ac.getGrants().agent).toBeUndefined();
                        expect(ac.getGrants().admin.$extend['editor']).toBeUndefined();
                        expect(ac.getGrants().admin.$extend['agent']).toBeUndefined();
                        throwsAccessControlError(function () { return ac.grant('roleX').extend('roleX'); });
                        throwsAccessControlError(function () { return ac.grant(['admin2', 'roleX']).extend(['roleX', 'admin3']); });
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should extend / remove roles synchronously', function () {
        var ac = this.ac;
        ac.grant('admin').execute('create').on('book');
        ac.extendRole('onur', 'admin');
        expect(ac.getGrants().onur.$extend['admin']).toEqual({ condition: undefined });
        ac.grant('role2, role3, editor, viewer, agent').execute('create').on('book');
        ac.extendRole('onur', ['role2', 'role3']);
        expect(Object.keys(ac.getGrants().onur.$extend).sort()).toEqual(['admin', 'role2', 'role3']);
        ac.grant('admin').extendSync('editor');
        expect(Object.keys(ac.getGrants().admin.$extend)).toEqual(['editor']);
        (ac.grant('admin').extendSync(['viewer', 'editor', 'agent'])).execute('read').on('video');
        expect(Object.keys(ac.getGrants().admin.$extend).sort()).toEqual(['agent', 'editor', 'viewer']);
        (ac.grant(['editor', 'agent']).extendSync(['role2', 'role3'])).execute('update').on('photo');
        expect(Object.keys(ac.getGrants().editor.$extend).sort()).toEqual(['role2', 'role3']);
        ac.removeRoles(['editor', 'agent']);
        expect(ac.getGrants().editor).toBeUndefined();
        expect(ac.getGrants().agent).toBeUndefined();
        expect(ac.getGrants().admin.$extend['editor']).toBeUndefined();
        expect(ac.getGrants().admin.$extend['agent']).toBeUndefined();
        throwsError(function () { return ac.grant('roleX').extendSync('roleX'); });
        throwsError(function () { return ac.grant(['admin2', 'roleX']).extendSync(['roleX', 'admin3']); });
    });
    it('should throw error while trying extend own role', function () {
        var ac = this.ac;
        ac.grant('user').execute('create').when(categorySportsCondition).on('book');
        ac.extendRole('editor', 'user');
        ac.grant('editor').execute('delete').on('book');
        throwsAccessControlError(function () { return ac.extendRole('user', 'editor'); });
        throwsAccessControlError(function () { return ac.extendRole('user', 'user'); });
    });
    it('should throw error while trying extend own role synchronously', function () {
        var ac = this.ac;
        ac.grant('user').execute('create').when(categorySportsCondition).on('book');
        ac.extendRole('editor', 'user');
        ac.grant('editor').execute('delete').on('book');
        throwsError(function () { return ac.extendRole('user', 'editor'); });
        throwsError(function () { return ac.extendRole('user', 'user'); });
    });
    it('should extend roles when conditions used', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, sportsEditorGrant, politicsEditorGrant, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        ac = this.ac;
                        sportsEditorGrant = {
                            role: 'sports/editor',
                            resource: 'post',
                            action: 'create',
                            attributes: ['*'],
                            condition: categorySportsCondition
                        };
                        politicsEditorGrant = {
                            role: 'politics/editor',
                            resource: 'post',
                            action: 'create',
                            attributes: ['*'],
                            condition: categoryPoliticsCondition
                        };
                        ac.grant(sportsEditorGrant);
                        ac.grant(politicsEditorGrant);
                        ac.extendRole('editor', ['sports/editor', 'politics/editor']);
                        _a = expect;
                        return [4 /*yield*/, ac.can('editor').context(categorySportsContext).execute('create').on('post')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('editor').context(categoryPoliticsContext).execute('create').on('post')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should extend roles when conditions used synchronously', function () {
        var ac = this.ac;
        var sportsEditorGrant = {
            role: 'sports/editor',
            resource: 'post',
            action: 'create',
            attributes: ['*'],
            condition: categorySportsCondition
        };
        var politicsEditorGrant = {
            role: 'politics/editor',
            resource: 'post',
            action: 'create',
            attributes: ['*'],
            condition: categoryPoliticsCondition
        };
        ac.grant(sportsEditorGrant);
        ac.grant(politicsEditorGrant);
        ac.extendRole('editor', ['sports/editor', 'politics/editor']);
        expect((ac.can('editor').context(categorySportsContext).execute('create').sync().on('post')).granted).toEqual(true);
        expect((ac.can('editor').context(categoryPoliticsContext).execute('create').sync().on('post')).granted).toEqual(true);
    });
    it('should extend roles and reflect the changes done to original role used synchronously', function () {
        var ac = this.ac;
        var sportsEditorGrant = {
            role: 'news/editor',
            resource: 'post',
            action: 'create',
            attributes: ['*'],
            condition: categorySportsCondition
        };
        var politicsEditorGrant = {
            role: 'news/editor',
            resource: 'post',
            action: 'create',
            attributes: ['*'],
            condition: categoryPoliticsCondition
        };
        ac.grant(sportsEditorGrant);
        ac.grant(politicsEditorGrant);
        var businessEditorGrant = {
            role: 'editor',
            resource: 'post',
            action: 'create',
            attributes: ['*'],
            condition: categoryBusinessCondition
        };
        ac.grant(businessEditorGrant);
        ac.extendRole('editor', ['news/editor']);
        expect((ac.can('editor').context(categorySportsContext).execute('create').sync().on('post')).granted).toEqual(true);
        expect((ac.can('editor').context(categoryPoliticsContext).execute('create').sync().on('post')).granted).toEqual(true);
        expect((ac.can('editor').context(categoryBusinessContext).execute('create').sync().on('post')).granted).toEqual(true);
        // Add more permissions to original role
        var healthEditorGrant = {
            role: 'news/editor',
            resource: 'post',
            action: 'create',
            attributes: ['*'],
            condition: categoryHealthCondition
        };
        ac.grant(healthEditorGrant);
        expect((ac.can('editor').context(categoryHealthContext).execute('create').sync().on('post')).granted).toEqual(true);
    });
    it('should extend roles with conditions', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, editorGrant, _a, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        ac = this.ac;
                        editorGrant = {
                            role: 'editor',
                            resource: 'post',
                            action: 'create',
                            attributes: ['*'] // grant only
                        };
                        ac.grant(editorGrant);
                        ac.extendRole('sports/editor', 'editor', categorySportsCondition);
                        ac.extendRole('politics/editor', 'editor', categoryPoliticsCondition);
                        _a = expect;
                        return [4 /*yield*/, ac.can('editor').execute('create').on('post')];
                    case 1:
                        _a.apply(void 0, [(_f.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('editor').context(categorySportsContext).execute('create').on('post')];
                    case 2:
                        _b.apply(void 0, [(_f.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('editor').context(categoryPoliticsContext).execute('create').on('post')];
                    case 3:
                        _c.apply(void 0, [(_f.sent()).granted]).toEqual(true);
                        _d = expect;
                        return [4 /*yield*/, ac.can('sports/editor').context(categoryPoliticsContext).execute('create').on('post')];
                    case 4:
                        _d.apply(void 0, [(_f.sent()).granted]).toEqual(false);
                        _e = expect;
                        return [4 /*yield*/, ac.can('sports/editor').context(categorySportsContext).execute('create').on('post')];
                    case 5:
                        _e.apply(void 0, [(_f.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should extend roles with conditions synchronously', function () {
        var ac = this.ac;
        var editorGrant = {
            role: 'editor',
            resource: 'post',
            action: 'create',
            attributes: ['*'] // grant only
        };
        ac.grant(editorGrant);
        ac.extendRole('sports/editor', 'editor', categorySportsCondition);
        ac.extendRole('politics/editor', 'editor', categoryPoliticsCondition);
        expect((ac.can('editor').execute('create').sync().on('post')).granted).toEqual(true);
        expect((ac.can('editor').context(categorySportsContext).execute('create').sync().on('post')).granted).toEqual(true);
        expect((ac.can('editor').context(categoryPoliticsContext).execute('create').sync().on('post')).granted).toEqual(true);
        expect((ac.can('sports/editor').context(categoryPoliticsContext).execute('create').sync().on('post')).granted).toEqual(false);
        expect((ac.can('sports/editor').context(categorySportsContext).execute('create').sync().on('post')).granted).toEqual(true);
    });
    it('should support multi-level extension of roles when conditions used', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, editorGrant, _a, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        ac = this.ac;
                        editorGrant = {
                            role: 'editor',
                            resource: 'post',
                            action: 'create',
                            attributes: ['*'] // grant only
                        };
                        ac.grant(editorGrant);
                        // first level of extension
                        ac.extendRole('sports/editor', 'editor', categorySportsCondition);
                        ac.extendRole('politics/editor', 'editor', categoryPoliticsCondition);
                        // second level of extension
                        ac.extendRole('sports-and-politics/editor', ['sports/editor', 'politics/editor']);
                        _a = expect;
                        return [4 /*yield*/, ac.can('sports-and-politics/editor').context(categorySportsContext).execute('create').on('post')];
                    case 1:
                        _a.apply(void 0, [(_f.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('sports-and-politics/editor').context(categoryPoliticsContext).execute('create').on('post')];
                    case 2:
                        _b.apply(void 0, [(_f.sent()).granted]).toEqual(true);
                        // third level of extension
                        ac.extendRole('conditonal/sports-and-politics/editor', 'sports-and-politics/editor', {
                            Fn: 'EQUALS',
                            args: { status: 'draft' }
                        });
                        _c = expect;
                        return [4 /*yield*/, ac.can('conditonal/sports-and-politics/editor').context({
                                category: 'sports',
                                status: 'draft'
                            }).execute('create').on('post')];
                    case 3:
                        _c.apply(void 0, [(_f.sent()).granted]).toEqual(true);
                        _d = expect;
                        return [4 /*yield*/, ac.can('conditonal/sports-and-politics/editor').context({
                                category: 'tech',
                                status: 'draft'
                            }).execute('create').on('post')];
                    case 4:
                        _d.apply(void 0, [(_f.sent()).granted]).toEqual(false);
                        _e = expect;
                        return [4 /*yield*/, ac.can('conditonal/sports-and-politics/editor').context({
                                category: 'sports',
                                status: 'published'
                            }).execute('create').on('post')];
                    case 5:
                        _e.apply(void 0, [(_f.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should support multi-level extension of roles when conditions used synchronously', function () {
        var ac = this.ac;
        var editorGrant = {
            role: 'editor',
            resource: 'post',
            action: 'create',
            attributes: ['*'] // grant only
        };
        ac.grant(editorGrant);
        // first level of extension
        ac.extendRole('sports/editor', 'editor', categorySportsCondition);
        ac.extendRole('politics/editor', 'editor', categoryPoliticsCondition);
        // second level of extension
        ac.extendRole('sports-and-politics/editor', ['sports/editor', 'politics/editor']);
        expect((ac.can('sports-and-politics/editor').context(categorySportsContext).execute('create').sync().on('post')).granted).toEqual(true);
        expect((ac.can('sports-and-politics/editor').context(categoryPoliticsContext).execute('create').sync().on('post')).granted).toEqual(true);
        // third level of extension
        ac.extendRole('conditonal/sports-and-politics/editor', 'sports-and-politics/editor', {
            Fn: 'EQUALS',
            args: { status: 'draft' }
        });
        expect((ac.can('conditonal/sports-and-politics/editor').context({
            category: 'sports',
            status: 'draft'
        }).execute('create').sync().on('post')).granted).toEqual(true);
        expect((ac.can('conditonal/sports-and-politics/editor').context({
            category: 'tech',
            status: 'draft'
        }).execute('create').sync().on('post')).granted).toEqual(false);
        expect((ac.can('conditonal/sports-and-politics/editor').context({
            category: 'sports',
            status: 'published'
        }).execute('create').sync().on('post')).granted).toEqual(false);
    });
    it('should remove roles when conditions used', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, editorGrant, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        ac = this.ac;
                        editorGrant = {
                            role: 'editor',
                            resource: 'post',
                            action: 'create',
                            attributes: ['*'] // grant only
                        };
                        ac.grant(editorGrant);
                        ac.extendRole('sports/editor', 'editor', categorySportsCondition);
                        ac.extendRole('politics/editor', 'editor', categoryPoliticsCondition);
                        ac.removeRoles('editor');
                        _a = expect;
                        return [4 /*yield*/, ac.can('sports/editor').context(categoryPoliticsContext).execute('create').on('post')];
                    case 1:
                        _a.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        _b = expect;
                        return [4 /*yield*/, ac.can('sports/editor').context(categorySportsContext).execute('create').on('post')];
                    case 2:
                        _b.apply(void 0, [(_c.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should remove roles when conditions used synchronously', function () {
        var ac = this.ac;
        var editorGrant = {
            role: 'editor',
            resource: 'post',
            action: 'create',
            attributes: ['*'] // grant only
        };
        ac.grant(editorGrant);
        ac.extendRole('sports/editor', 'editor', categorySportsCondition);
        ac.extendRole('politics/editor', 'editor', categoryPoliticsCondition);
        ac.removeRoles('editor');
        expect((ac.can('sports/editor').context(categoryPoliticsContext).execute('create').sync().on('post')).granted).toEqual(false);
        expect((ac.can('sports/editor').context(categorySportsContext).execute('create').sync().on('post')).granted).toEqual(false);
    });
    it('should throw if grant objects are invalid', function () {
        return __awaiter(this, void 0, void 0, function () {
            var o, ac, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ac = this.ac;
                        o = {
                            role: '',
                            resource: 'post',
                            action: 'create',
                            attributes: ['*'] // grant only
                        };
                        expect(function () { return ac.grant(o); }).toThrow();
                        o = {
                            role: 'moderator',
                            resource: null,
                            action: 'create',
                            attributes: ['*'] // grant only
                        };
                        expect(function () { return ac.grant(o); }).toThrow();
                        o = {
                            role: 'admin',
                            resource: 'post',
                            action: null,
                            attributes: ['*'] // grant only
                        };
                        expect(function () { return ac.grant(o); }).toThrow();
                        o = {
                            role: 'admin2',
                            resource: 'post',
                            action: 'create',
                            attributes: ['*'] // grant only
                        };
                        expect(function () { return ac.grant(o); }).not.toThrow();
                        _a = expect;
                        return [4 /*yield*/, ac.can('admin2').execute('create').on('post')];
                    case 1:
                        _a.apply(void 0, [(_b.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should throw if grant objects are invalid synchronously', function () {
        var o, ac = this.ac;
        o = {
            role: '',
            resource: 'post',
            action: 'create',
            attributes: ['*'] // grant only
        };
        expect(function () { return ac.grant(o); }).toThrow();
        o = {
            role: 'moderator',
            resource: null,
            action: 'create',
            attributes: ['*'] // grant only
        };
        expect(function () { return ac.grant(o); }).toThrow();
        o = {
            role: 'admin',
            resource: 'post',
            action: null,
            attributes: ['*'] // grant only
        };
        expect(function () { return ac.grant(o); }).toThrow();
        o = {
            role: 'admin2',
            resource: 'post',
            action: 'create',
            attributes: ['*'] // grant only
        };
        expect(function () { return ac.grant(o); }).not.toThrow();
        expect((ac.can('admin2').execute('create').sync().on('post')).granted).toEqual(true);
    });
    it('should throw `AccessControlError` for invalid role', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ac = this.ac;
                        throwsAccessControlError(function () { return ac.grant().execute('create').on(); });
                        ac.setGrants(grantsObject);
                        return [4 /*yield*/, promiseThrowsError(ac.can('invalid-role').execute('create').on('video'), 'Role not found')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should throw `AccessControlError` for invalid role synchronously', function () {
        var ac = this.ac;
        throwsAccessControlError(function () { return ac.grant().execute('create').on(); });
        ac.setGrants(grantsObject);
        throwsError(function () { return ac.can('invalid-role').execute('create').sync().on('video'); }, 'Role not found');
    });
    it('should filter granted attributes', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, attrs, data, permission, filtered;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ac = this.ac, attrs = ['*', '!account.balance.credit', '!account.id', '!secret'], data = {
                            name: 'Company, LTD.',
                            address: {
                                city: 'istanbul',
                                country: 'TR'
                            },
                            account: {
                                id: 33,
                                taxNo: 12345,
                                balance: {
                                    credit: 100,
                                    deposit: 0
                                }
                            },
                            secret: {
                                value: 'hidden'
                            }
                        };
                        ac.grant('user').execute('create').on('company', attrs);
                        return [4 /*yield*/, (ac.can('user').execute('create').on('company'))];
                    case 1:
                        permission = _a.sent();
                        expect(permission.granted).toEqual(true);
                        filtered = permission.filter(data);
                        expect(filtered.name).toEqual(jasmine.any(String));
                        expect(filtered.address).toEqual(jasmine.any(Object));
                        expect(filtered.address.city).toEqual('istanbul');
                        expect(filtered.account).toBeDefined();
                        expect(filtered.account.id).toBeUndefined();
                        expect(filtered.account.balance).toBeDefined();
                        expect(filtered.account.credit).toBeUndefined();
                        expect(filtered.secret).toBeUndefined();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should filter granted attributes synchronously', function () {
        var ac = this.ac, attrs = ['*', '!account.balance.credit', '!account.id', '!secret'], data = {
            name: 'Company, LTD.',
            address: {
                city: 'istanbul',
                country: 'TR'
            },
            account: {
                id: 33,
                taxNo: 12345,
                balance: {
                    credit: 100,
                    deposit: 0
                }
            },
            secret: {
                value: 'hidden'
            }
        };
        ac.grant('user').execute('create').on('company', attrs);
        var permission = (ac.can('user').execute('create').sync().on('company'));
        expect(permission.granted).toEqual(true);
        var filtered = permission.filter(data);
        expect(filtered.name).toEqual(jasmine.any(String));
        expect(filtered.address).toEqual(jasmine.any(Object));
        expect(filtered.address.city).toEqual('istanbul');
        expect(filtered.account).toBeDefined();
        expect(filtered.account.id).toBeUndefined();
        expect(filtered.account.balance).toBeDefined();
        expect(filtered.account.credit).toBeUndefined();
        expect(filtered.secret).toBeUndefined();
    });
    it('Check with multiple roles changes grant list (issue #2)', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('admin').execute('update').on('video')
                            .grant(['user', 'admin']).execute('update').on('video');
                        // Admin can update any video
                        _a = expect;
                        return [4 /*yield*/, ac.can(['admin']).execute('update').on('video')];
                    case 1:
                        // Admin can update any video
                        _a.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        // Admin can update any or own video
                        _b = expect;
                        return [4 /*yield*/, ac.can(['admin']).execute('update').on('video')];
                    case 2:
                        // Admin can update any or own video
                        _b.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can(['admin']).execute('update').on('video')];
                    case 3:
                        _c.apply(void 0, [(_d.sent()).granted]).toEqual(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('Check with multiple roles changes grant list (issue #2) synchronously', function () {
        var ac = this.ac;
        ac.grant('admin').execute('update').on('video')
            .grant(['user', 'admin']).execute('update').on('video');
        // Admin can update any video
        expect((ac.can(['admin']).execute('update').sync().on('video')).granted).toEqual(true);
        // Admin can update any or own video
        expect((ac.can(['admin']).execute('update').sync().on('video')).granted).toEqual(true);
        expect((ac.can(['admin']).execute('update').sync().on('video')).granted).toEqual(true);
    });
    it('should grant multiple roles and multiple resources', function () {
        return __awaiter(this, void 0, void 0, function () {
            var ac, _a, _b, _c, _d, _e, _f, _g, _h, _j;
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        ac = this.ac;
                        ac.grant('admin, user').execute('create').on('profile, video');
                        _a = expect;
                        return [4 /*yield*/, ac.can('admin').execute('create').on('profile')];
                    case 1:
                        _a.apply(void 0, [(_k.sent()).granted]).toEqual(true);
                        _b = expect;
                        return [4 /*yield*/, ac.can('admin').execute('create').on('video')];
                    case 2:
                        _b.apply(void 0, [(_k.sent()).granted]).toEqual(true);
                        _c = expect;
                        return [4 /*yield*/, ac.can('user').execute('create').on('profile')];
                    case 3:
                        _c.apply(void 0, [(_k.sent()).granted]).toEqual(true);
                        _d = expect;
                        return [4 /*yield*/, ac.can('user').execute('create').on('video')];
                    case 4:
                        _d.apply(void 0, [(_k.sent()).granted]).toEqual(true);
                        ac.grant('admin, user').execute('create').on('profile, video', '*,!id');
                        _e = expect;
                        return [4 /*yield*/, ac.can('admin').execute('create').on('profile')];
                    case 5:
                        _e.apply(void 0, [(_k.sent()).attributes]).toEqual(['*']);
                        _f = expect;
                        return [4 /*yield*/, ac.can('admin').execute('create').on('video')];
                    case 6:
                        _f.apply(void 0, [(_k.sent()).attributes]).toEqual(['*']);
                        _g = expect;
                        return [4 /*yield*/, ac.can('user').execute('create').on('profile')];
                    case 7:
                        _g.apply(void 0, [(_k.sent()).attributes]).toEqual(['*']);
                        _h = expect;
                        return [4 /*yield*/, ac.can('user').execute('create').on('video')];
                    case 8:
                        _h.apply(void 0, [(_k.sent()).attributes]).toEqual(['*']);
                        _j = expect;
                        return [4 /*yield*/, ac.can('user').execute('create').on('non-existent')];
                    case 9:
                        _j.apply(void 0, [(_k.sent()).granted]).toEqual(false);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should grant multiple roles and multiple resources synchronously', function () {
        var ac = this.ac;
        ac.grant('admin, user').execute('create').on('profile, video');
        expect((ac.can('admin').execute('create').sync().on('profile')).granted).toEqual(true);
        expect((ac.can('admin').execute('create').sync().on('video')).granted).toEqual(true);
        expect((ac.can('user').execute('create').sync().on('profile')).granted).toEqual(true);
        expect((ac.can('user').execute('create').sync().on('video')).granted).toEqual(true);
        ac.grant('admin, user').execute('create').on('profile, video', '*,!id');
        expect((ac.can('admin').execute('create').sync().on('profile')).attributes).toEqual(['*']);
        expect((ac.can('admin').execute('create').sync().on('video')).attributes).toEqual(['*']);
        expect((ac.can('user').execute('create').sync().on('profile')).attributes).toEqual(['*']);
        expect((ac.can('user').execute('create').sync().on('video')).attributes).toEqual(['*']);
        expect((ac.can('user').execute('create').sync().on('non-existent')).granted).toEqual(false);
    });
});
